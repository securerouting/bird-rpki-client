/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 */
#ifndef RPKIRTRPREFIXORIGINTABLE_H
#define RPKIRTRPREFIXORIGINTABLE_H

#ifdef __cplusplus
extern          "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

    /*
     * other required module components 
     */
    /* *INDENT-OFF*  */
config_add_mib(RPKI-RTR-MIB)
config_require(RPKI-RTR-MIB/rpkiRtrPrefixOriginTable/rpkiRtrPrefixOriginTable_interface)
config_require(RPKI-RTR-MIB/rpkiRtrPrefixOriginTable/rpkiRtrPrefixOriginTable_data_access)
config_require(RPKI-RTR-MIB/rpkiRtrPrefixOriginTable/rpkiRtrPrefixOriginTable_data_get)
config_require(RPKI-RTR-MIB/rpkiRtrPrefixOriginTable/rpkiRtrPrefixOriginTable_data_set)
    /* *INDENT-ON*  */

    /*
     * OID and column number definitions for rpkiRtrPrefixOriginTable 
     */
#include "rpkiRtrPrefixOriginTable_oids.h"

    /*
     * enum definions 
     */
#include "rpkiRtrPrefixOriginTable_enums.h"

    /*
     *********************************************************************
     * function declarations
     */
    void            init_rpkiRtrPrefixOriginTable(void);
    void            shutdown_rpkiRtrPrefixOriginTable(void);

    /*
     *********************************************************************
     * Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table rpkiRtrPrefixOriginTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * RPKI-RTR-MIB::rpkiRtrPrefixOriginTable is subid 4 of rpkiRtrObjects.
     * Its status is Current.
     * OID: .1.3.6.1.2.1.218.1.4, length: 9
     */
    /*
     *********************************************************************
     * When you register your mib, you get to provide a generic
     * pointer that will be passed back to you for most of the
     * functions calls.
     *
     * TODO:100:r: Review all context structures
     */
    /*
     * TODO:101:o: |-> Review rpkiRtrPrefixOriginTable registration context.
     */
    typedef netsnmp_data_list rpkiRtrPrefixOriginTable_registration;

/**********************************************************************/
    /*
     * TODO:110:r: |-> Review rpkiRtrPrefixOriginTable data context structure.
     * This structure is used to represent the data for rpkiRtrPrefixOriginTable.
     */
    /*
     * This structure contains storage for all the columns defined in the
     * rpkiRtrPrefixOriginTable.
     */
    typedef struct rpkiRtrPrefixOriginTable_data_s {

    } rpkiRtrPrefixOriginTable_data;


    /*
     * TODO:120:r: |-> Review rpkiRtrPrefixOriginTable mib index.
     * This structure is used to represent the index for rpkiRtrPrefixOriginTable.
     */
    typedef struct rpkiRtrPrefixOriginTable_mib_index_s {

        /*
         * rpkiRtrPrefixOriginAddressType(1)/InetAddressType/ASN_INTEGER/long(u_long)//l/a/w/E/r/d/h
         */
        u_long          rpkiRtrPrefixOriginAddressType;

        /*
         * rpkiRtrPrefixOriginAddress(2)/InetAddress/ASN_OCTET_STR/char(char)//L/a/w/e/R/d/h
         */
        /** 128 - 5(other indexes) - oid length(11) = 111 */
        char            rpkiRtrPrefixOriginAddress[111];
        size_t          rpkiRtrPrefixOriginAddress_len;

        /*
         * rpkiRtrPrefixOriginMinLength(3)/InetAddressPrefixLength/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/R/d/H
         */
        u_long          rpkiRtrPrefixOriginMinLength;

        /*
         * rpkiRtrPrefixOriginMaxLength(4)/InetAddressPrefixLength/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/R/d/H
         */
        u_long          rpkiRtrPrefixOriginMaxLength;

        /*
         * rpkiRtrPrefixOriginASN(5)/InetAutonomousSystemNumber/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/R/d/H
         */
        u_long          rpkiRtrPrefixOriginASN;

        /*
         * rpkiRtrPrefixOriginCacheServerId(6)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/R/d/h
         */
        u_long          rpkiRtrPrefixOriginCacheServerId;


    } rpkiRtrPrefixOriginTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review rpkiRtrPrefixOriginTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     *
     * BE VERY CAREFUL TO TAKE INTO ACCOUNT THE MAXIMUM
     * POSSIBLE LENGHT FOR EVERY VARIABLE LENGTH INDEX!
     * Guessing 128 - col/entry(2)  - oid len(9)
     */
#define MAX_rpkiRtrPrefixOriginTable_IDX_LEN     117


    /*
     *********************************************************************
     * TODO:130:o: |-> Review rpkiRtrPrefixOriginTable Row request (rowreq) context.
     * When your functions are called, you will be passed a
     * rpkiRtrPrefixOriginTable_rowreq_ctx pointer.
     */
    typedef struct rpkiRtrPrefixOriginTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
        netsnmp_index   oid_idx;
        oid             oid_tmp[MAX_rpkiRtrPrefixOriginTable_IDX_LEN];

        rpkiRtrPrefixOriginTable_mib_index tbl_idx;

        rpkiRtrPrefixOriginTable_data data;

        /*
         * flags per row. Currently, the first (lower) 8 bits are reserved
         * for the user. See mfd.h for other flags.
         */
        u_int           rowreq_flags;

        /*
         * TODO:131:o: |   |-> Add useful data to rpkiRtrPrefixOriginTable rowreq context.
         */

        /*
         * storage for future expansion
         */
        netsnmp_data_list *rpkiRtrPrefixOriginTable_data_list;

    } rpkiRtrPrefixOriginTable_rowreq_ctx;

    typedef struct rpkiRtrPrefixOriginTable_ref_rowreq_ctx_s {
        rpkiRtrPrefixOriginTable_rowreq_ctx *rowreq_ctx;
    } rpkiRtrPrefixOriginTable_ref_rowreq_ctx;

    /*
     *********************************************************************
     * function prototypes
     */
    int            
        rpkiRtrPrefixOriginTable_pre_request
        (rpkiRtrPrefixOriginTable_registration * user_context);
    int            
        rpkiRtrPrefixOriginTable_post_request
        (rpkiRtrPrefixOriginTable_registration * user_context, int rc);


    rpkiRtrPrefixOriginTable_rowreq_ctx
        *rpkiRtrPrefixOriginTable_row_find_by_mib_index
        (rpkiRtrPrefixOriginTable_mib_index * mib_idx);

    extern const oid rpkiRtrPrefixOriginTable_oid[];
    extern const int rpkiRtrPrefixOriginTable_oid_size;


#include "rpkiRtrPrefixOriginTable_interface.h"
#include "rpkiRtrPrefixOriginTable_data_access.h"
#include "rpkiRtrPrefixOriginTable_data_get.h"
#include "rpkiRtrPrefixOriginTable_data_set.h"

    /*
     * DUMMY markers, ignore
     *
     * TODO:099:x: *************************************************************
     * TODO:199:x: *************************************************************
     * TODO:299:x: *************************************************************
     * TODO:399:x: *************************************************************
     * TODO:499:x: *************************************************************
     */

#ifdef __cplusplus
}
#endif
#endif                          /* RPKIRTRPREFIXORIGINTABLE_H */
/** @} */
