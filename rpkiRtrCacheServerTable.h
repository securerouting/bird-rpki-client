/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 */
#ifndef RPKIRTRCACHESERVERTABLE_H
#define RPKIRTRCACHESERVERTABLE_H

#ifdef __cplusplus
extern          "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

    /*
     * other required module components 
     */
    /* *INDENT-OFF*  */
config_add_mib(RPKI-RTR-MIB)
config_require(RPKI-RTR-MIB/rpkiRtrCacheServerTable/rpkiRtrCacheServerTable_interface)
config_require(RPKI-RTR-MIB/rpkiRtrCacheServerTable/rpkiRtrCacheServerTable_data_access)
config_require(RPKI-RTR-MIB/rpkiRtrCacheServerTable/rpkiRtrCacheServerTable_data_get)
config_require(RPKI-RTR-MIB/rpkiRtrCacheServerTable/rpkiRtrCacheServerTable_data_set)
    /* *INDENT-ON*  */

    /*
     * OID and column number definitions for rpkiRtrCacheServerTable 
     */
#include "rpkiRtrCacheServerTable_oids.h"

    /*
     * enum definions 
     */
#include "rpkiRtrCacheServerTable_enums.h"

    /*
     *********************************************************************
     * function declarations
     */
    void            init_rpkiRtrCacheServerTable(void);
    void            shutdown_rpkiRtrCacheServerTable(void);

    /*
     *********************************************************************
     * Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table rpkiRtrCacheServerTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * RPKI-RTR-MIB::rpkiRtrCacheServerTable is subid 2 of rpkiRtrObjects.
     * Its status is Current.
     * OID: .1.3.6.1.2.1.218.1.2, length: 9
     */
    /*
     *********************************************************************
     * When you register your mib, you get to provide a generic
     * pointer that will be passed back to you for most of the
     * functions calls.
     *
     * TODO:100:r: Review all context structures
     */
    /*
     * TODO:101:o: |-> Review rpkiRtrCacheServerTable registration context.
     */
    typedef netsnmp_data_list rpkiRtrCacheServerTable_registration;

/**********************************************************************/
    /*
     * TODO:110:r: |-> Review rpkiRtrCacheServerTable data context structure.
     * This structure is used to represent the data for rpkiRtrCacheServerTable.
     */
    /*
     * This structure contains storage for all the columns defined in the
     * rpkiRtrCacheServerTable.
     */
    typedef struct rpkiRtrCacheServerTable_data_s {

        /*
         * rpkiRtrCacheServerLocalAddressType(4)/InetAddressType/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
        u_long          rpkiRtrCacheServerLocalAddressType;

        /*
         * rpkiRtrCacheServerLocalAddress(5)/InetAddress/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/h
         */
        char            rpkiRtrCacheServerLocalAddress[255];
        size_t          rpkiRtrCacheServerLocalAddress_len;     /* # of char elements, not bytes */

        /*
         * rpkiRtrCacheServerLocalPort(6)/InetPortNumber/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/R/d/H
         */
        u_long          rpkiRtrCacheServerLocalPort;

        /*
         * rpkiRtrCacheServerPreference(7)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/D/h
         */
        u_long          rpkiRtrCacheServerPreference;

        /*
         * rpkiRtrCacheServerConnectionType(8)/RpkiRtrConnectionType/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
        u_long          rpkiRtrCacheServerConnectionType;

        /*
         * rpkiRtrCacheServerConnectionStatus(9)/INTEGER/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
         */
        u_long          rpkiRtrCacheServerConnectionStatus;

        /*
         * rpkiRtrCacheServerDescription(10)/LongUtf8String/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
        char            rpkiRtrCacheServerDescription[1024];
        size_t          rpkiRtrCacheServerDescription_len;      /* # of char elements, not bytes */

        /*
         * rpkiRtrCacheServerMsgsReceived(11)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          rpkiRtrCacheServerMsgsReceived;

        /*
         * rpkiRtrCacheServerMsgsSent(12)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          rpkiRtrCacheServerMsgsSent;

        /*
         * rpkiRtrCacheServerV4ActiveRecords(13)/GAUGE/ASN_GAUGE/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          rpkiRtrCacheServerV4ActiveRecords;

        /*
         * rpkiRtrCacheServerV4Announcements(14)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          rpkiRtrCacheServerV4Announcements;

        /*
         * rpkiRtrCacheServerV4Withdrawals(15)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          rpkiRtrCacheServerV4Withdrawals;

        /*
         * rpkiRtrCacheServerV6ActiveRecords(16)/GAUGE/ASN_GAUGE/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          rpkiRtrCacheServerV6ActiveRecords;

        /*
         * rpkiRtrCacheServerV6Announcements(17)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          rpkiRtrCacheServerV6Announcements;

        /*
         * rpkiRtrCacheServerV6Withdrawals(18)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          rpkiRtrCacheServerV6Withdrawals;

        /*
         * rpkiRtrCacheServerLatestSerial(19)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          rpkiRtrCacheServerLatestSerial;

        /*
         * rpkiRtrCacheServerSessionID(20)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/R/d/h
         */
        u_long          rpkiRtrCacheServerSessionID;

        /*
         * rpkiRtrCacheServerRefreshTimer(21)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/R/d/h
         */
        u_long          rpkiRtrCacheServerRefreshTimer;

        /*
         * rpkiRtrCacheServerTimeToRefresh(22)/INTEGER32/ASN_INTEGER/long(long)//l/A/w/e/r/d/h
         */
        long            rpkiRtrCacheServerTimeToRefresh;

        /*
         * rpkiRtrCacheServerId(23)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/R/d/h
         */
        u_long          rpkiRtrCacheServerId;

    } rpkiRtrCacheServerTable_data;


    /*
     * TODO:120:r: |-> Review rpkiRtrCacheServerTable mib index.
     * This structure is used to represent the index for rpkiRtrCacheServerTable.
     */
    typedef struct rpkiRtrCacheServerTable_mib_index_s {

        /*
         * rpkiRtrCacheServerRemoteAddressType(1)/InetAddressType/ASN_INTEGER/long(u_long)//l/a/w/E/r/d/h
         */
        u_long          rpkiRtrCacheServerRemoteAddressType;

        /*
         * rpkiRtrCacheServerRemoteAddress(2)/InetAddress/ASN_OCTET_STR/char(char)//L/a/w/e/R/d/h
         */
        /** 128 - 2(other indexes) - oid length(11) = 114 */
        char            rpkiRtrCacheServerRemoteAddress[114];
        size_t          rpkiRtrCacheServerRemoteAddress_len;

        /*
         * rpkiRtrCacheServerRemotePort(3)/InetPortNumber/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/R/d/H
         */
        u_long          rpkiRtrCacheServerRemotePort;


    } rpkiRtrCacheServerTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review rpkiRtrCacheServerTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     *
     * BE VERY CAREFUL TO TAKE INTO ACCOUNT THE MAXIMUM
     * POSSIBLE LENGHT FOR EVERY VARIABLE LENGTH INDEX!
     * Guessing 128 - col/entry(2)  - oid len(9)
     */
#define MAX_rpkiRtrCacheServerTable_IDX_LEN     117


    /*
     *********************************************************************
     * TODO:130:o: |-> Review rpkiRtrCacheServerTable Row request (rowreq) context.
     * When your functions are called, you will be passed a
     * rpkiRtrCacheServerTable_rowreq_ctx pointer.
     */
    typedef struct rpkiRtrCacheServerTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
        netsnmp_index   oid_idx;
        oid             oid_tmp[MAX_rpkiRtrCacheServerTable_IDX_LEN];

        rpkiRtrCacheServerTable_mib_index tbl_idx;

        rpkiRtrCacheServerTable_data data;

        /*
         * flags per row. Currently, the first (lower) 8 bits are reserved
         * for the user. See mfd.h for other flags.
         */
        u_int           rowreq_flags;

        /*
         * TODO:131:o: |   |-> Add useful data to rpkiRtrCacheServerTable rowreq context.
         */

        /*
         * storage for future expansion
         */
        netsnmp_data_list *rpkiRtrCacheServerTable_data_list;

    } rpkiRtrCacheServerTable_rowreq_ctx;

    typedef struct rpkiRtrCacheServerTable_ref_rowreq_ctx_s {
        rpkiRtrCacheServerTable_rowreq_ctx *rowreq_ctx;
    } rpkiRtrCacheServerTable_ref_rowreq_ctx;

    /*
     *********************************************************************
     * function prototypes
     */
    int            
        rpkiRtrCacheServerTable_pre_request
        (rpkiRtrCacheServerTable_registration * user_context);
    int            
        rpkiRtrCacheServerTable_post_request
        (rpkiRtrCacheServerTable_registration * user_context, int rc);


    rpkiRtrCacheServerTable_rowreq_ctx
        *rpkiRtrCacheServerTable_row_find_by_mib_index
        (rpkiRtrCacheServerTable_mib_index * mib_idx);

    extern const oid rpkiRtrCacheServerTable_oid[];
    extern const int rpkiRtrCacheServerTable_oid_size;


#include "rpkiRtrCacheServerTable_interface.h"
#include "rpkiRtrCacheServerTable_data_access.h"
#include "rpkiRtrCacheServerTable_data_get.h"
#include "rpkiRtrCacheServerTable_data_set.h"

    /*
     * DUMMY markers, ignore
     *
     * TODO:099:x: *************************************************************
     * TODO:199:x: *************************************************************
     * TODO:299:x: *************************************************************
     * TODO:399:x: *************************************************************
     * TODO:499:x: *************************************************************
     */

#ifdef __cplusplus
}
#endif
#endif                          /* RPKIRTRCACHESERVERTABLE_H */
/** @} */
